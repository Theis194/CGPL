var cardSet = [1 of hearts, 2 of hearts, 3 of hearts, 4 of hearts, 1 of diamonds, 2 of diamonds, 3 of diamonds, 4 of diamonds, 1 of clubs, 2 of clubs, 3 of clubs, 4 of clubs, 1 of spades, 2 of spades, 3 of spades, 4 of spades];

var playerIndex = 0;
var players = [Player, Player, Player, Player];
var playerSize = players.size();

function DistributeCards()
{
    for (var i = 0; i < playerSize; i++)
    {
        var ply = players.get(i);

        ply.drawCard(cardSet.get(i));
        ply.drawCard(cardSet.get(playerSize + i));
        ply.drawCard(cardSet.get(playerSize * 2 + i));
        ply.drawCard(cardSet.get(playerSize * 3 + i));
    }
}

function CheckHand(hand)
{
    var firstCard = hand.get(0);

    for (card in hand)
    {
        if (not (card.color() == firstCard.color()))
        {
            return false;
        }
    }

    return true;
}

function HashFunction(seed, index)
{
    print("About to do modulo");
    return (seed * index + 5 + index * 526) % 42;
}

function TakeTurn(ply, seed)
{
    var i = seed % 4;

    return ply.discardCard(i);
}

function PlayGame()
{
    DistributeCards();
    var seed = 0;

    while (true)
    {
        var extractedCards = [];

        for (var i = 0; i < playerSize; i++)
        {
            var ply = players.get(i);

            var card = TakeTurn(ply, seed);
            extractedCards.add(card);

            seed = HashFunction(seed, i);
        }

        for (var i = 0; i < playerSize; i++)
        {
            var receiverIndex = (i + 1) % playerSize;
            var receiver = players.get(receiverIndex);

            var card = extractedCards.get(i);

            receiver.drawCard(card);
        }

        for (ply in players)
        {
            var hand = ply.getHand();
            var hasWon = CheckHand(hand);
            if (hasWon)
            {
                return true;
            }
        }
    }   
}

PlayGame();