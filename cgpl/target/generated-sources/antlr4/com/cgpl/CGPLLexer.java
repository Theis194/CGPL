// Generated from com\cgpl\CGPL.g4 by ANTLR 4.7.1
package com.cgpl;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CGPLLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, AND=28, OR=29, NOT=30, RETURN=31, FUNCTION=32, 
		LCURLY=33, RCURLY=34, LPAREN=35, RPAREN=36, IF=37, ELSE=38, VAR=39, KONST=40, 
		FOR=41, WHILE=42, IN=43, NUMBER=44, STRING=45, BOOLEAN=46, BREAK=47, DECK=48, 
		IDENTIFIER=49, EQUAL=50, LT=51, GT=52, LT_OR_EQUAL=53, GT_OR_EQUAL=54, 
		OP_INC=55, OP_DEC=56, OP_DIV=57, OP_MULT=58, OP_MOD=59, OP_ADD=60, OP_SUB=61, 
		CRLF=62, WS=63;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "AND", "OR", "NOT", "RETURN", "FUNCTION", "LCURLY", 
		"RCURLY", "LPAREN", "RPAREN", "IF", "ELSE", "VAR", "KONST", "FOR", "WHILE", 
		"IN", "NUMBER", "STRING", "BOOLEAN", "BREAK", "DECK", "IDENTIFIER", "EQUAL", 
		"LT", "GT", "LT_OR_EQUAL", "GT_OR_EQUAL", "OP_INC", "OP_DEC", "OP_DIV", 
		"OP_MULT", "OP_MOD", "OP_ADD", "OP_SUB", "CRLF", "WS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'='", "','", "'['", "']'", "'.'", "'add'", "'remove'", "'get'", 
		"'shuffle'", "'draw'", "'of'", "'value'", "'suit'", "'color'", "'name'", 
		"'hearts'", "'diamonds'", "'clubs'", "'spades'", "'jack'", "'queen'", 
		"'king'", "'ace'", "'switch'", "'case'", "'default'", "':'", "'and'", 
		"'or'", "'not'", "'return'", "'function'", "'{'", "'}'", "'('", "')'", 
		"'if'", "'else'", "'var'", "'const'", "'for'", "'while'", "'in'", null, 
		null, null, "'break'", "'Deck'", null, "'=='", "'<'", "'>'", "'<='", "'>='", 
		"'++'", "'--'", "'/'", "'*'", "'%'", "'+'", "'-'", "';'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "AND", "OR", "NOT", "RETURN", "FUNCTION", "LCURLY", 
		"RCURLY", "LPAREN", "RPAREN", "IF", "ELSE", "VAR", "KONST", "FOR", "WHILE", 
		"IN", "NUMBER", "STRING", "BOOLEAN", "BREAK", "DECK", "IDENTIFIER", "EQUAL", 
		"LT", "GT", "LT_OR_EQUAL", "GT_OR_EQUAL", "OP_INC", "OP_DEC", "OP_DIV", 
		"OP_MULT", "OP_MOD", "OP_ADD", "OP_SUB", "CRLF", "WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public CGPLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CGPL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2A\u019f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7"+
		"\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3"+
		"\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3"+
		"\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3"+
		"\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3"+
		"\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3#\3#\3$\3"+
		"$\3%\3%\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*"+
		"\3*\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3-\3-\7-\u014c\n-\f-\16-\u014f\13"+
		"-\3-\5-\u0152\n-\3.\3.\7.\u0156\n.\f.\16.\u0159\13.\3.\3.\3/\3/\3/\3/"+
		"\3/\3/\3/\3/\3/\5/\u0166\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3"+
		"\61\3\61\3\61\3\62\3\62\7\62\u0175\n\62\f\62\16\62\u0178\13\62\3\63\3"+
		"\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\38\38\38\3"+
		"9\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\6@\u019a\n@\r@\16@\u019b"+
		"\3@\3@\2\2A\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33"+
		"\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67"+
		"\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65"+
		"i\66k\67m8o9q:s;u<w=y>{?}@\177A\3\2\b\3\2\63;\3\2\62;\5\2\f\f\17\17$$"+
		"\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\2\u01a4\2\3\3\2\2\2\2\5"+
		"\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2"+
		"\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33"+
		"\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2"+
		"\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2"+
		"\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2"+
		"\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K"+
		"\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2"+
		"\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2"+
		"\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q"+
		"\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2"+
		"\2\2\2\177\3\2\2\2\3\u0081\3\2\2\2\5\u0083\3\2\2\2\7\u0085\3\2\2\2\t\u0087"+
		"\3\2\2\2\13\u0089\3\2\2\2\r\u008b\3\2\2\2\17\u008f\3\2\2\2\21\u0096\3"+
		"\2\2\2\23\u009a\3\2\2\2\25\u00a2\3\2\2\2\27\u00a7\3\2\2\2\31\u00aa\3\2"+
		"\2\2\33\u00b0\3\2\2\2\35\u00b5\3\2\2\2\37\u00bb\3\2\2\2!\u00c0\3\2\2\2"+
		"#\u00c7\3\2\2\2%\u00d0\3\2\2\2\'\u00d6\3\2\2\2)\u00dd\3\2\2\2+\u00e2\3"+
		"\2\2\2-\u00e8\3\2\2\2/\u00ed\3\2\2\2\61\u00f1\3\2\2\2\63\u00f8\3\2\2\2"+
		"\65\u00fd\3\2\2\2\67\u0105\3\2\2\29\u0107\3\2\2\2;\u010b\3\2\2\2=\u010e"+
		"\3\2\2\2?\u0112\3\2\2\2A\u0119\3\2\2\2C\u0122\3\2\2\2E\u0124\3\2\2\2G"+
		"\u0126\3\2\2\2I\u0128\3\2\2\2K\u012a\3\2\2\2M\u012d\3\2\2\2O\u0132\3\2"+
		"\2\2Q\u0136\3\2\2\2S\u013c\3\2\2\2U\u0140\3\2\2\2W\u0146\3\2\2\2Y\u0151"+
		"\3\2\2\2[\u0153\3\2\2\2]\u0165\3\2\2\2_\u0167\3\2\2\2a\u016d\3\2\2\2c"+
		"\u0172\3\2\2\2e\u0179\3\2\2\2g\u017c\3\2\2\2i\u017e\3\2\2\2k\u0180\3\2"+
		"\2\2m\u0183\3\2\2\2o\u0186\3\2\2\2q\u0189\3\2\2\2s\u018c\3\2\2\2u\u018e"+
		"\3\2\2\2w\u0190\3\2\2\2y\u0192\3\2\2\2{\u0194\3\2\2\2}\u0196\3\2\2\2\177"+
		"\u0199\3\2\2\2\u0081\u0082\7?\2\2\u0082\4\3\2\2\2\u0083\u0084\7.\2\2\u0084"+
		"\6\3\2\2\2\u0085\u0086\7]\2\2\u0086\b\3\2\2\2\u0087\u0088\7_\2\2\u0088"+
		"\n\3\2\2\2\u0089\u008a\7\60\2\2\u008a\f\3\2\2\2\u008b\u008c\7c\2\2\u008c"+
		"\u008d\7f\2\2\u008d\u008e\7f\2\2\u008e\16\3\2\2\2\u008f\u0090\7t\2\2\u0090"+
		"\u0091\7g\2\2\u0091\u0092\7o\2\2\u0092\u0093\7q\2\2\u0093\u0094\7x\2\2"+
		"\u0094\u0095\7g\2\2\u0095\20\3\2\2\2\u0096\u0097\7i\2\2\u0097\u0098\7"+
		"g\2\2\u0098\u0099\7v\2\2\u0099\22\3\2\2\2\u009a\u009b\7u\2\2\u009b\u009c"+
		"\7j\2\2\u009c\u009d\7w\2\2\u009d\u009e\7h\2\2\u009e\u009f\7h\2\2\u009f"+
		"\u00a0\7n\2\2\u00a0\u00a1\7g\2\2\u00a1\24\3\2\2\2\u00a2\u00a3\7f\2\2\u00a3"+
		"\u00a4\7t\2\2\u00a4\u00a5\7c\2\2\u00a5\u00a6\7y\2\2\u00a6\26\3\2\2\2\u00a7"+
		"\u00a8\7q\2\2\u00a8\u00a9\7h\2\2\u00a9\30\3\2\2\2\u00aa\u00ab\7x\2\2\u00ab"+
		"\u00ac\7c\2\2\u00ac\u00ad\7n\2\2\u00ad\u00ae\7w\2\2\u00ae\u00af\7g\2\2"+
		"\u00af\32\3\2\2\2\u00b0\u00b1\7u\2\2\u00b1\u00b2\7w\2\2\u00b2\u00b3\7"+
		"k\2\2\u00b3\u00b4\7v\2\2\u00b4\34\3\2\2\2\u00b5\u00b6\7e\2\2\u00b6\u00b7"+
		"\7q\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7t\2\2\u00ba"+
		"\36\3\2\2\2\u00bb\u00bc\7p\2\2\u00bc\u00bd\7c\2\2\u00bd\u00be\7o\2\2\u00be"+
		"\u00bf\7g\2\2\u00bf \3\2\2\2\u00c0\u00c1\7j\2\2\u00c1\u00c2\7g\2\2\u00c2"+
		"\u00c3\7c\2\2\u00c3\u00c4\7t\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6\7u\2\2"+
		"\u00c6\"\3\2\2\2\u00c7\u00c8\7f\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7c"+
		"\2\2\u00ca\u00cb\7o\2\2\u00cb\u00cc\7q\2\2\u00cc\u00cd\7p\2\2\u00cd\u00ce"+
		"\7f\2\2\u00ce\u00cf\7u\2\2\u00cf$\3\2\2\2\u00d0\u00d1\7e\2\2\u00d1\u00d2"+
		"\7n\2\2\u00d2\u00d3\7w\2\2\u00d3\u00d4\7d\2\2\u00d4\u00d5\7u\2\2\u00d5"+
		"&\3\2\2\2\u00d6\u00d7\7u\2\2\u00d7\u00d8\7r\2\2\u00d8\u00d9\7c\2\2\u00d9"+
		"\u00da\7f\2\2\u00da\u00db\7g\2\2\u00db\u00dc\7u\2\2\u00dc(\3\2\2\2\u00dd"+
		"\u00de\7l\2\2\u00de\u00df\7c\2\2\u00df\u00e0\7e\2\2\u00e0\u00e1\7m\2\2"+
		"\u00e1*\3\2\2\2\u00e2\u00e3\7s\2\2\u00e3\u00e4\7w\2\2\u00e4\u00e5\7g\2"+
		"\2\u00e5\u00e6\7g\2\2\u00e6\u00e7\7p\2\2\u00e7,\3\2\2\2\u00e8\u00e9\7"+
		"m\2\2\u00e9\u00ea\7k\2\2\u00ea\u00eb\7p\2\2\u00eb\u00ec\7i\2\2\u00ec."+
		"\3\2\2\2\u00ed\u00ee\7c\2\2\u00ee\u00ef\7e\2\2\u00ef\u00f0\7g\2\2\u00f0"+
		"\60\3\2\2\2\u00f1\u00f2\7u\2\2\u00f2\u00f3\7y\2\2\u00f3\u00f4\7k\2\2\u00f4"+
		"\u00f5\7v\2\2\u00f5\u00f6\7e\2\2\u00f6\u00f7\7j\2\2\u00f7\62\3\2\2\2\u00f8"+
		"\u00f9\7e\2\2\u00f9\u00fa\7c\2\2\u00fa\u00fb\7u\2\2\u00fb\u00fc\7g\2\2"+
		"\u00fc\64\3\2\2\2\u00fd\u00fe\7f\2\2\u00fe\u00ff\7g\2\2\u00ff\u0100\7"+
		"h\2\2\u0100\u0101\7c\2\2\u0101\u0102\7w\2\2\u0102\u0103\7n\2\2\u0103\u0104"+
		"\7v\2\2\u0104\66\3\2\2\2\u0105\u0106\7<\2\2\u01068\3\2\2\2\u0107\u0108"+
		"\7c\2\2\u0108\u0109\7p\2\2\u0109\u010a\7f\2\2\u010a:\3\2\2\2\u010b\u010c"+
		"\7q\2\2\u010c\u010d\7t\2\2\u010d<\3\2\2\2\u010e\u010f\7p\2\2\u010f\u0110"+
		"\7q\2\2\u0110\u0111\7v\2\2\u0111>\3\2\2\2\u0112\u0113\7t\2\2\u0113\u0114"+
		"\7g\2\2\u0114\u0115\7v\2\2\u0115\u0116\7w\2\2\u0116\u0117\7t\2\2\u0117"+
		"\u0118\7p\2\2\u0118@\3\2\2\2\u0119\u011a\7h\2\2\u011a\u011b\7w\2\2\u011b"+
		"\u011c\7p\2\2\u011c\u011d\7e\2\2\u011d\u011e\7v\2\2\u011e\u011f\7k\2\2"+
		"\u011f\u0120\7q\2\2\u0120\u0121\7p\2\2\u0121B\3\2\2\2\u0122\u0123\7}\2"+
		"\2\u0123D\3\2\2\2\u0124\u0125\7\177\2\2\u0125F\3\2\2\2\u0126\u0127\7*"+
		"\2\2\u0127H\3\2\2\2\u0128\u0129\7+\2\2\u0129J\3\2\2\2\u012a\u012b\7k\2"+
		"\2\u012b\u012c\7h\2\2\u012cL\3\2\2\2\u012d\u012e\7g\2\2\u012e\u012f\7"+
		"n\2\2\u012f\u0130\7u\2\2\u0130\u0131\7g\2\2\u0131N\3\2\2\2\u0132\u0133"+
		"\7x\2\2\u0133\u0134\7c\2\2\u0134\u0135\7t\2\2\u0135P\3\2\2\2\u0136\u0137"+
		"\7e\2\2\u0137\u0138\7q\2\2\u0138\u0139\7p\2\2\u0139\u013a\7u\2\2\u013a"+
		"\u013b\7v\2\2\u013bR\3\2\2\2\u013c\u013d\7h\2\2\u013d\u013e\7q\2\2\u013e"+
		"\u013f\7t\2\2\u013fT\3\2\2\2\u0140\u0141\7y\2\2\u0141\u0142\7j\2\2\u0142"+
		"\u0143\7k\2\2\u0143\u0144\7n\2\2\u0144\u0145\7g\2\2\u0145V\3\2\2\2\u0146"+
		"\u0147\7k\2\2\u0147\u0148\7p\2\2\u0148X\3\2\2\2\u0149\u014d\t\2\2\2\u014a"+
		"\u014c\t\3\2\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3\2"+
		"\2\2\u014d\u014e\3\2\2\2\u014e\u0152\3\2\2\2\u014f\u014d\3\2\2\2\u0150"+
		"\u0152\t\3\2\2\u0151\u0149\3\2\2\2\u0151\u0150\3\2\2\2\u0152Z\3\2\2\2"+
		"\u0153\u0157\7$\2\2\u0154\u0156\n\4\2\2\u0155\u0154\3\2\2\2\u0156\u0159"+
		"\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015a\3\2\2\2\u0159"+
		"\u0157\3\2\2\2\u015a\u015b\7$\2\2\u015b\\\3\2\2\2\u015c\u015d\7v\2\2\u015d"+
		"\u015e\7t\2\2\u015e\u015f\7w\2\2\u015f\u0166\7g\2\2\u0160\u0161\7h\2\2"+
		"\u0161\u0162\7c\2\2\u0162\u0163\7n\2\2\u0163\u0164\7u\2\2\u0164\u0166"+
		"\7g\2\2\u0165\u015c\3\2\2\2\u0165\u0160\3\2\2\2\u0166^\3\2\2\2\u0167\u0168"+
		"\7d\2\2\u0168\u0169\7t\2\2\u0169\u016a\7g\2\2\u016a\u016b\7c\2\2\u016b"+
		"\u016c\7m\2\2\u016c`\3\2\2\2\u016d\u016e\7F\2\2\u016e\u016f\7g\2\2\u016f"+
		"\u0170\7e\2\2\u0170\u0171\7m\2\2\u0171b\3\2\2\2\u0172\u0176\t\5\2\2\u0173"+
		"\u0175\t\6\2\2\u0174\u0173\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174\3\2"+
		"\2\2\u0176\u0177\3\2\2\2\u0177d\3\2\2\2\u0178\u0176\3\2\2\2\u0179\u017a"+
		"\7?\2\2\u017a\u017b\7?\2\2\u017bf\3\2\2\2\u017c\u017d\7>\2\2\u017dh\3"+
		"\2\2\2\u017e\u017f\7@\2\2\u017fj\3\2\2\2\u0180\u0181\7>\2\2\u0181\u0182"+
		"\7?\2\2\u0182l\3\2\2\2\u0183\u0184\7@\2\2\u0184\u0185\7?\2\2\u0185n\3"+
		"\2\2\2\u0186\u0187\7-\2\2\u0187\u0188\7-\2\2\u0188p\3\2\2\2\u0189\u018a"+
		"\7/\2\2\u018a\u018b\7/\2\2\u018br\3\2\2\2\u018c\u018d\7\61\2\2\u018dt"+
		"\3\2\2\2\u018e\u018f\7,\2\2\u018fv\3\2\2\2\u0190\u0191\7\'\2\2\u0191x"+
		"\3\2\2\2\u0192\u0193\7-\2\2\u0193z\3\2\2\2\u0194\u0195\7/\2\2\u0195|\3"+
		"\2\2\2\u0196\u0197\7=\2\2\u0197~\3\2\2\2\u0198\u019a\t\7\2\2\u0199\u0198"+
		"\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c"+
		"\u019d\3\2\2\2\u019d\u019e\b@\2\2\u019e\u0080\3\2\2\2\t\2\u014d\u0151"+
		"\u0157\u0165\u0176\u019b\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}